

# Blog Project

A Django-based blog application with features such as user authentication, post creation, commenting, tagging, categorization, bookmarking, and more. This application includes REST API endpoints for interacting with blog posts, comments, and user profiles.

## Table of Contents

- [Introduction](#introduction)
- [Features](#features)
- [Technologies Used](#technologies-used)
- [Installation](#installation)
- [Configuration](#configuration)
- [Models](#models)
- [Views](#views)
- [Admin Customization](#admin-customization)
- [URLs](#urls)
- [Settings](#settings)
- [Usage](#usage)
- [Contributing](#contributing)

## Introduction

This is a simple blog application where users can:
- Register, log in, and manage their profiles.
- Create, edit, and delete blog posts.
- Comment on posts and interact with other users.
- Categorize and tag posts for easier browsing.
- Bookmark and like posts.
- Subscribe to the blog for updates.

## Features

- **User Authentication**: Register, login, and manage user profiles.
- **Post Management**: Create, update, delete, and view posts. Posts can be tagged and categorized.
- **Comments**: Users can comment on posts and reply to other comments.
- **Search**: Search posts by title, content, or author.
- **Tagging & Categorization**: Posts can be tagged with multiple tags and categorized for better organization.
- **Bookmarking**: Users can bookmark posts for later viewing.
- **Likes & Shares**: Users can like posts and share them, which is tracked.
- **Admin Dashboard**: Admins can manage posts, comments, users, categories, and tags via the Django admin interface.
- **REST API**: Full-featured API for interacting with posts, comments, and user profiles.

## Technologies Used

- **Django**: A high-level Python web framework.
- **Django REST Framework**: For building RESTful APIs.
- **MySQL**: Database backend.
- **CKEditor**: WYSIWYG editor for blog content.
- **JWT Authentication**: For API authentication.
- **Bootstrap**: Frontend styling (if added later for your templates).

## Installation

### Prerequisites
1. Python 3.8 or later
2. MySQL database setup
3. Virtual environment (recommended)

### Steps to install:
1. Clone the repository:
   ```bash
   git clone <repository_url>
   cd <project_directory>
   ```

2. Create and activate a virtual environment:
   ```bash
   python3 -m venv venv
   source venv/bin/activate  # On Windows use `venv\Scripts\activate`
   ```

3. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

4. Configure the database in `settings.py` with your MySQL details:
   ```python
   DATABASES = {
       'default': {
           'ENGINE': 'django.db.backends.mysql',
           'NAME': 'your_database',
           'USER': 'your_mysql_username',
           'PASSWORD': 'your_mysql_password',
           'HOST': '127.0.0.1',
           'PORT': '3306',
       }
   }
   ```

5. Run migrations:
   ```bash
   python manage.py migrate
   ```

6. Create a superuser to access the Django admin panel:
   ```bash
   python manage.py createsuperuser
   ```

7. Run the development server:
   ```bash
   python manage.py runserver
   ```

8. Navigate to `http://127.0.0.1:8000` in your browser.

## Configuration

### Email Setup

In `settings.py`, configure your email settings to enable sending emails for features like user registration, password resets, and notifications.

```python
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'your_email@gmail.com'
EMAIL_HOST_PASSWORD = 'your_email_password'
```

### Static and Media Files

- **Static files**: By default, static files (CSS, JavaScript, images) are served under `/static/`.
- **Media files**: Uploaded files (like profile images) are stored under `/media/`.

You can change these paths in `settings.py` if needed.

## Models

### **Category Model**
- Represents a category for blog posts (e.g., Technology, Health, etc.).

### **Tag Model**
- Represents a tag for posts, allowing users to categorize content more granularly.

### **Post Model**
- Represents a blog post, including title, content, tags, category, views count, and share count.

### **Profile Model**
- Stores user profile information, including bio, profile image, social link, and bookmarked posts.

### **Comment Model**
- Allows users to comment on posts and reply to other comments.

### **Subscription Model**
- Used to store user subscriptions for newsletter-like features.

### **Like Model**
- Represents a user's "like" on a post.

### **Bookmark Model**
- Tracks the posts that a user has bookmarked.

## Views

### **Post Views**
- Display lists of posts or individual post details.
- Provides functionality to create, update, and delete posts.

### **Comment Views**
- Display a list of comments for a post.
- Allow users to add new comments and delete existing ones.

### **Authentication Views**
- User registration, login, logout, and profile management.

### **Category and Tag Views**
- Allows admins and users to view and manage categories and tags.

### **Search View**
- Provides the ability to search posts by title, content, or author.

## Admin Customization

The Django Admin interface has been customized for the following models:
- **Post**: Added actions to increment and reset share count. Displayed likes, shares, and comments in the list view.
- **Comment**: Allows actions to approve and delete comments.
- **Profile**: Allows viewing and searching user profiles.
- **User**: Custom user management to display total likes and ban users.

## URLs

Here are the primary URLs for the application:

### Frontend URLs:
- `/` — Home page with a list of blog posts.
- `/register/` — User registration page.
- `/login/` — User login page.
- `/profile/` — User profile page.
- `/post/<int:post_id>/` — View individual post.
- `/post/<int:post_id>/like/` — Like a post.

### API URLs:
- `/api/comments/` — List and create comments.
- `/api/posts/` — List and create posts.
- `/api/users/` — List all users.
- `/api/users/<int:user_id>/` — Retrieve a user by ID.

## Settings

In the `settings.py` file, various configurations are set for the project, including the database configuration, static/media file handling, email settings, and more.

Key settings:
- **SECRET_KEY**: Used for cryptographic signing.
- **DATABASES**: Defines the database settings (MySQL in this case).
- **EMAIL_BACKEND**: Configures the email system.
- **CKEDITOR**: Configures CKEditor for rich text content editing.

## Usage

Once the project is set up and the server is running, you can interact with it in the following ways:

1. **Admin Dashboard**: Access the Django admin panel at `/admin` (username and password set during `createsuperuser`).
2. **User Interaction**: Users can register, log in, comment on posts, and like/share posts.
3. **API**: Use the REST API endpoints for programmatic interaction with posts, comments, users, etc.

## Contributing

If you'd like to contribute to this project, feel free to submit a pull request. Here’s how you can contribute:

1. Fork the repository.
2. Create a new branch (`git checkout -b feature-xyz`).
3. Make your changes.
4. Commit your changes (`git commit -am 'Add new feature'`).
5. Push to the branch (`git push origin feature-xyz`).
6. Create a pull request.

---

This README covers the key aspects of your Django blog project, including installation, features, models, and configuration. You can expand or modify it as necessary based on additional features or changes in your project.